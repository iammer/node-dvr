var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
		}
		//console.log('Writing...');
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000304' + 
	'00000000000000000000680000000100' +
	'000010000000' + channel + '000000010000000061' +
	'646d696e000000094060200000000022' +
	'0100000000000000cf112000000e0100' +
	'02917c0400000048070e0100000e0190' +
	'113501e4f012000000000028f3120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});
#!/usr/bin/env node

var net=require('net');

listVideos(function(vl) {
	console.log('Got Videos:');
	vl.forEach(function(v,i) {
		console.log(v);
	});
});

function listVideos(cb) {
	
	var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});
	
	dvr.on('connect',function() {
		var gotSize=false;
		var size=0;
		var videoList=[];
		var start=12;
		var end=71;
		var remainder='';


		dvr.on('data',function(b) {
			if (!gotSize) {
				size=b.readUInt32LE(0) - b.length;
				gotSize=true;
			} else {
				if (remainder!='')  {
					videoList.push(remainder + b.toString('ascii',0,end));
					remainder='';
					start+=148;
					end+=148;
				}
				
				while (end<b.length) {
					videoList.push(b.toString('ascii',start,end));
					start+=148;
					end+=148;
				}
											
				if (start<b.length) {
					remainder=b.toString('ascii',start,b.length);
				}
				
				start-=b.length;
				end-=b.length;
				size-=b.length;
				
				if (size<=0) {
					dvr.end();
					cb(videoList);
				}
			}
		});
		
		var getStream=new Buffer(
			'00000000000000000000010000000904' + 
			'0000000cf8e0010000002803000000ff' +
			'ff00000d0405000000173b3b1beb0000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +		
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'00000000000000000000000000000000' +
			'0000000000000000000000','hex');
			
		dvr.write(getStream);
	});
}#!/usr/bin/env node

var net=require('net');
var fs=require('fs');

var hStream=process.stdout;//fs.createWriteStream('sample.264');
//var debugStream=fs.createWriteStream('debug.out',{encoding: 'ascii'});

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		//debugStream.write("------------------------\n")
		//debugStream.write(formatForDisplay(d));
		//debugStream.write("------------------------\n")
		//debugStream.write('d.length: ' + (d.length) + "\n");
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				//debugStream.write('bytesLeft: ' + bytesLeft + '\n');
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					//debugStream.write('write1: ' + (d.length-headerSize) + '\n');
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					//debugStream.write('write2: ' + (bytesLeft) + '\n');
					bytesLeft=0;
				}
				//debugStream.write('bytesLeft2: ' + bytesLeft + '\n');
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				//debugStream.write('write3: ' + (d.length) + '\n');
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				//debugStream.write('write4: ' + (bytesLeft) + '\n');
				bytesLeft=0;
			}
			
			//debugStream.write('bytesLeft4: ' + bytesLeft + '\n');
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000002000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}



#!/usr/bin/env node

var net=require('net');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	var bytes=0;
	dvr.on('data',function(d) {
		if (bytes<16) {
			bytes+=d.length;
		} else {
			if (d[4]==0x48) {
				process.stdout.write(d.slice(0,4));
				process.stdout.write(d.slice(8,12));
				process.stdout.write(d.slice(30));
			}
		}
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000303' + 
	'00000000000000000000680000000100' +
	'00001000000001000000010000000061' +
	'646d696e000000094060210000000022' +
	'01000000000000094f512100000e0100' +
	'02917c0400000048070e0100000e0188' +
	'1135016cf5120000000000b0f7120000' + 
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	dvr.write(getStream);
});



#!/usr/bin/env node

var net=require('net');
var fs=require('fs');


var recordingName=process.argv[2];

var out=fs.createWriteStream('out.h264');

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {	
	var bytesLeft=0;
	var chunkLeft=0;
	var foundChunk=false;
	var chunkAt=0;
	var stage=0;
	var chunkType='';
	var remainder=false;
	
	dvr.on('data',function(d) {
		stage++;
		if (stage==2) {
			console.log(d.toString('hex'));
			bytesLeft=d.readUInt32LE(0);
		} else if (stage>2) {
			console.log('packetsize: ' + d.length);
			bytesLeft-=d.length;
			if (remainder) {
				console.log('Found remainder');
				var buf=new Buffer(remainder.length + d.length);
				remainder.copy(buf);
				d.copy(buf,remainder.length);
				d=buf;
				remainder=false;
			}
			
			if (!foundChunk) {
				chunkAt=findStart(chunkAt,d);
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				if (chunkAt>=0) {
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						chunkAt=0;
					} else {
						chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
						chunkLeft=d.readUInt32LE(chunkAt+8);
						chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
						foundChunk=true;
					}
				} else {
					chunkAt=0;
				}

			}
			
			if (foundChunk) {
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
							
				while (foundChunk && chunkAt+chunkLeft < d.length) {
					out.write(d.slice(chunkAt,chunkAt+chunkLeft));
					chunkAt+=chunkLeft;
					
					if (chunkAt+48>d.length) {
						remainder=d.slice(chunkAt);
						foundChunk=false;
						chunkAt=0;
					} else {
						chunkAt=findStart(chunkAt,d);
						if (chunkAt>=0) {
							if (chunkAt+48>d.length) {
								remainder=d.slice(chunkAt);
								foundChunk=false;
								chunkAt=0;
							} else {
								chunkType=d.toString('ascii',chunkAt+2,chunkAt+4);
								console.log(chunkType);
								chunkLeft=d.readUInt32LE(chunkAt+8);
								chunkAt+=d.readUInt32LE(chunkAt+12) + 0x18;
							}
						} else {
							foundChunk=false;
							chunkAt=0;
						}
					}
					console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
				}
					
				if (foundChunk) {
					out.write(d.slice(chunkAt,d.length));
					chunkLeft-=(d.length-chunkAt);
					chunkAt=0;
				}
				
				console.log('chunkAt: ' + chunkAt + ', chunkLeft: ' + chunkLeft + ', foundChunk: ' + foundChunk);
			}
					
			console.log(bytesLeft);
			if (bytesLeft<=0) {
				dvr.end();
				out.end();
			}
		}
			
	});
	
	var getStream=new Buffer(
	'00000000000000000000010000000705' + 
	'00000000000000000000ac0000000100' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'00000000000000000000000000000000' +
	'0000000000000000000000','hex');
	
	new Buffer(recordingName,'ascii').copy(getStream,51);
	
	dvr.write(getStream);
});

function findStart(chunkAt,d) {
	for(var i=chunkAt;i<d.length-8;i++) {
		if (d[i+2]==0x64 && d[i+3]==0x63 && d[i+4]==0x48 && d[i+5]==0x32 && d[i+6]==0x36 && d[i+7]==0x34) {
			console.log('Found start: ' + d.toString('ascii',i,i+8));
			return i;
		}
	}
	
	return -1;
}
	
	
	
	#!/usr/bin/env node

var net=require('net');

var nextId=0;
var server=net.createServer(function(sockIn) {
	var connectionId=nextId++;
	console.log('==============' + connectionId);
	
	
	var sockOut=net.createConnection({port: 9000, host: '10.0.0.21'});

	sockIn.on('end',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('end',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	sockIn.on('error',function() {
		console.log('>++++++++++++++' + connectionId);
		sockOut.end();
	});
	
	sockOut.on('error',function() {
		console.log('<++++++++++++++' + connectionId);
		sockIn.end();
	});
	
	
	sockIn.on('data',function(d) {
		console.log('>>>>>>>>>>>>>>' + connectionId);
		console.log(formatForDisplay(d));
		sockOut.write(d);
	});
	
	sockOut.on('data',function(d) {
		console.log('<<<<<<<<<<<<<<' + connectionId);
		console.log(formatForDisplay(d));
		sockIn.write(d);
	});
});

server.listen(9000);

function formatForDisplay(buf) {
	var result='';
	var hexString = '';
	var plainString = '';
	for(var i=0;i<buf.length;i++) {
		var b=buf[i];
		hexString+=(b<16?'0':'') + b.toString(16) + ' ';
		plainString+=(b>=32 & b<128)?String.fromCharCode(b):'.';
		
		if (((i+1) & 0xf)==0) {
			result+=hexString + '    ' + plainString + '\n';
			hexString='';
			plainString='';
		}
	}
	
	if (hexString.length>0) {
		while (hexString.length<48) {
			hexString+='   ';
		}
		
		result+=hexString + '    ' + plainString + '\n';
	}
	
	
	return result;
}
	
	#!/usr/bin/env node

var fs=require('fs');

var r=fs.createReadStream('test.js');
var w=fs.createWriteStream('streamTest.out');

var result=255;
var totBytes=0;

r.on('end',function() {
	console.log(result);
});

r.on('readable',function() {
	var buf;
	while(buf=r.read(255)) {
		w.write(buf);
		totBytes+=buf.length;
		console.log('Read ' + buf.length + ' bytes of ' + totBytes);
		if (buf.length==255) r.unshift(buf.slice(206));
		result^=buf[buf.length-1];
		console.log(result);
	}
});var _=require('underscore');
var net=require('net');
var stream=require('stream');

var fs=require('fs');
var util=require('util');

var REQUEST_SIZE=507;
var SCAN_SIZE=255;
var SCAN_REMAINDER=6;
var STAGE1_HEAD=16;

var DVR=function(options) {
	this.options=options;
};

_.extend(DVR.prototype,{
	sendRequest: function(req) {
		var sock=net.createConnection(this.options);
		sock.on('connect',function() {
			sock.write(req.buffer);
		});
		
		return sock;
	},
	getRecording: function (recordingName) {
		return new H264Stripper(fs.createReadStream('test2.nvh'));
		//return (this.sendRequest(new RecordingRequest(recordingName)));
	}
		
});

var Request=function() {
	this.buffer=new Buffer(REQUEST_SIZE);
	this.buffer.fill(0);
	this.buffer[10]=1;
};

_.extend(Request.prototype,{
	setNumber: function(n) {
		this.buffer.writeUInt16BE(n,14);
	},
	setData: function(pos,data) {
		if (Buffer.isBuffer(data)) {
			data.copy(this.buffer,pos);
		} else {
			new Buffer(data,'hex').copy(this.buffer,pos);
		}
	}
});

var LiveStreamRequest=function(channel) {
	Request.call(this);
	this.channel=channel;
	this.setNumber(0x0304);
	this.setData(16,	'00000000000000000000680000000100' +
					'00001000000001000000010000000061' +
					'646d696e000000094060200000000022' +
					'0100000000000000cf112000000e0100' +
					'02917c0400000048070e0100000e0190' +
					'113501e4f012000000000028f3120000');
	this.buffer[22]=1<<(channel-1);
};

_.extend(LiveStreamRequest.prototype,Request.prototype);
	
var RecordingListRequest=function(year,month,day) {
	Request.call(this);
	this.setNumber(0x0904);
	this.setData(16,	'0000000cf8e0010000002803000000ff' +
					'ff00000d0405000000173b3b1beb0000');
	if (year>2000) year-=2000;
	this.buffer[19]=year;
	this.buffer[20]=month;
	this.buffer[21]=day;
};

_.extend(RecordingListRequest.prototype,Request.prototype);

var RecordingRequest=function(recording) {
	Request.call(this);
	this.setNumber(0x0705);
	this.setData(26,'ac0000000100');
	this.setData(51,new Buffer(recording,'ascii'));
};

_.extend(RecordingRequest.prototype,Request.prototype);

var H264Stripper=function(inStream,options) {
	this.inStream=inStream;
	
	inStream.on('end',function() {
		this.push(null);
	});
	
	inStream.on('readable',_.bind(this.readIn,this));
	
	this.stage=0;
	this.pushable=true;
	this.readSize=SCAN_SIZE;
	
	stream.Readable.call(this,options);
};

H264Stripper.prototype = Object.create(stream.Readable.prototype, { constructor: { value: H264Stripper }});

H264Stripper.prototype.readIn=function() {
		var buf;
		
		console.log('Will read ' + this.readSize + ' bytes');
		while((this.stage!=3 || this.pushable) && (buf=this.inStream.read(this.readSize))) {
			console.log('Read ' + buf.length + ' bytes for stage: ' + this.stage);
			console.dir(buf);
			switch(this.stage) {
			case 0:
				var i;
				for(i=0;this.stage==0 && i<=buf.length-SCAN_REMAINDER;i++) {
					if (buf[i]==0x64 && buf[i+1]==0x63 && buf[i+2]==0x48 && buf[i+3]==0x32 && buf[i+4]==0x36 && buf[i+5]==0x34) {
						this.stage=1;
						this.readSize=STAGE1_HEAD;
						i--;
					}
				}
				
				this.inStream.unshift(buf.slice(i));			
				break;
			case 1:
				this.stage=2;
				this.nextChunk=buf.readUInt32LE(6);
				this.readSize=buf.readUInt32LE(10) + 6;
				break;
			case 2:
				this.stage=3;
				this.readSize=this.nextChunk;
				break;
			case 3:
				this.stage=0;
				this.readSize=SCAN_SIZE;
				this.pushable=this.push(buf);
				break;
			}
		}
	};
	
H264Stripper.prototype._read=function() {
		if(!this.pushable) {
			this.pushable=true;
			this.readIn();
		}
	};

	

var dvr=new DVR({host: '10.0.0.21', port: 9000});
dvr.getRecording('ch00000000000001-130405-235004-235959-10p00001000000400.nvr').pipe(fs.createWriteStream('test2.h264'));

module.exports={
	Request: Request,
	LiveStreamRequest: LiveStreamRequest,
	RecordingListRequest: RecordingListRequest,
	RecordingRequest: RecordingRequest,
	DVR: DVR
};
#!/usr/bin/env node

var net=require('net');
var fs=require('fs');
var cp=require('child_process');

var channel=process.argv[2];
channel=1<<(channel-1);
channel=(channel<16?'0':'') + channel.toString(16);

//var hStream=process.stdout;
//''
//
var child=cp.spawn('mplayer',['-fps','30.1','-demuxer','h264es','-'],{stdio: ['pipe',process.stdout,process.stderr], encoding: 'binary'});

var hStream=child.stdin;

var dvr=net.createConnection({host: '10.0.0.21', port: '9000'});

dvr.on('connect',function() {
	child.on('exit',function() {
		dvr.end();
		process.exit();
	});
	
	var bytesLeft=0;
	hStream.on('error',function() {
		dvr.end();
	});
	
	dvr.on('data',function(d) {
		if (bytesLeft<=0) {
			if (d.slice(2,4).toString('utf8')=='dc') {
				bytesLeft=d.readUInt32LE(8);
				var headerSize=d.readUInt32LE(12) + 0x18;
				if (d.length<bytesLeft+headerSize) {
					hStream.write(d.slice(headerSize));
					bytesLeft-=(d.length-headerSize);
				} else {
					hStream.write(d.slice(headerSize,bytesLeft+headerSize));
					bytesLeft=0;
				}
			}
		} else {
			if (d.length<bytesLeft) {
				hStream.write(d);
				bytesLeft-=d.length;
			}  else {
				hStream.write(d.slice(0,bytesLeft));
				bytesLeft=0;
			}
			
